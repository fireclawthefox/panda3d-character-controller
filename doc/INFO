This character controler can be used for characters like seen in the genres of
platformers, stelath, action and first person shooters as well as others.

By default it uses Panda3D's own physics engine, but can simply be changed
to and extended with another engine.

Keyboard keys default settings:

escape      - Exit Application
w, a, s, d  - move in the respective direction
spacebar    - jump
mouse       - move camera
shift       - sprint
Home        - center camera behind player
del         - move camera left
page down   - move camera right
end         - Move camera down
page up     - Move camera up
e           - Do inteligent action (see Inteligent Actions section)
r           - Reset player to start position
p           - un-/pause player
f1          - Toggle debug information
f2          - Toggle between first- and third-person camera mode

To see how to use it, take a look into the demo.py script. The demo
script will create a demo.log file in the same folder.

Notes on physics:
    The following bitmasks will be used:
        0x80 -> For event trigger collisions with ghost nodes
        0x70 -> For body collisions with walls floors and other objects that the character should not pass through
        0x0f -> For ray collisions for example for inteligent movement detection


Inteligent Actions
The controller can do some special actions dependent on the players actions
Currently there are two inteligent actions available:
Wall Runs:
	1) Vertical wall run:
		Here the player runs head on towards a wall while pressing the inteligent action key
		if he's close enough and while presing the key, the character will start running up the
		wall or other object which is in front of him.
	2) Horizontal wall run:
		Similar to the vertical wall run with the difference, that the player needs to run
		along a wall. If started correctly, the character will run a bit upward and forward
		on the wall left or right next to him.
Ledge Grab:
	If the player is in front of a ledge which he got to by either doing a wall run, jumping or falling
	the character will initiate a ledge grab. In this mode, the character will hang on the ledge and can
	be moved left or right along the ledge. He can also move around slight curves but not to step edges.
	To let go from the ledge grab mode either press Spacebar to climb up on the ledge or 'W' to fall of
	from the ledge.


general descriptions and features

movements:
	walking/running
		DONE: basic move towards camera direction
		DONE: blend from standing to running and inbetween movement states
		TODO: position aware blended rotation toward desired direction
		DONE: Stepping, supports walking steps up and down (prevents "floating" effect)
		DONE: acclerate towards maximum speed
		DONE: prevent from running against, head first into walls
	crouching and crawling
		TODO: basic crouching and crawling
		TODO: stand up limiter
	jumping
		DONE: basic jumping
		DONE: position aware jumping
		DONE: Jump-enabled tollerance when start falling
	wallruns
		DONE: running along walls
	edge grab
		DONE: grabbing edges and moving along them
	climbing
		TODO: climb ladders and fences
moving platforms:
    DONE: player moves with platform
    DONE: player rotates with platform (Around Z-Axis)
camera:
	DONE: camera folows player
	DONE: collision detection for keeping camera outside of walls and player always in view
	DONE: slowly move in place when player is moving
    DONE: simple function to toggle between FP and TP view.


It consists of the following components which will play seamlessly together:

PlayerControler.py
	The main class that combines all the functionality

Config.py
	This script contains all configurable variables of the player

Camera.py
	This module handles the camera control and setup of the character

Control.py
	This module is responsible for the user input of the character

Animator.py
	The animator module handles the animation playing of the character and
	animation blending

Physics*.py
	This contains the physics interface of the character. Everything related
	to physics and collision detection should go here to make it simply
	interchangeable with other physic systems
    *Internal = using P3D's internal physic and collision system
    *Bullet = using Bullet physic and collision system



Known Bugs:
(Maybe solved) At verry rare occations, it could occure that the player stucks in the fall animation even tho he hit the ground
Camera can sometimes be positioned to close to the player and hence see through/in him
